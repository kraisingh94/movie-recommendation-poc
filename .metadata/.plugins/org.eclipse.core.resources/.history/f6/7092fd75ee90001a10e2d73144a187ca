package com.infogain.controller;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.infogain.dto.MovieDTO;
import com.infogain.entity.MovieEntity;
import com.infogain.exception.MovieNotFoundException;
import com.infogain.repository.MovieRepository;


@RestController
@RequestMapping("/movie")
public class MovieController {
    
    @Autowired
    private MovieRepository movieRepository;
    
    @PostMapping
    public MovieDTO createMovie(@RequestBody @Valid MovieDTO movieDto) {
    	MovieEntity movieEntity = new MovieEntity(movieDto.getName());
    	movieEntity = movieRepository.saveAndFlush(movieEntity);
    	movieDto.setMovieId(movieEntity.getId());
    	return movieDto;
    }
    
    @GetMapping
    public Collection<MovieDTO> getAllMovies(){
        return this.movieRepository.findAll()
                .stream()
                .map(MovieEntity::toDTO)
                .collect(Collectors.toList());
    }
    
    @GetMapping("/list")
    public Collection<MovieDTO> getListMovies(@RequestParam List<Integer> ids){
        List<MovieDTO> retVal = new ArrayList<>();
        ids.stream()
                .forEach(id -> {
                	Optional<MovieEntity> movieEntityOpt = this.movieRepository.findById(id.longValue());
                	if(!movieEntityOpt.isPresent()) {
                		throw new MovieNotFoundException();
                	}
                	MovieDTO dto = new MovieDTO(this.movieRepository.getOne(id.longValue()));
                    retVal.add(dto);
                });
        return retVal;
    }
    
    @GetMapping("/{movieId}")
    public MovieDTO getMovie(@PathVariable(value = "movieId") Long movieId){
        Optional<MovieEntity> movieEntityOpt = movieRepository.findById(movieId);
        if(!movieEntityOpt.isPresent()) {
        	throw new MovieNotFoundException();
        }
        return new MovieDTO(movieEntityOpt.get());
     }
    
    @GetMapping("/dummyData")
    public void insertDummyData(){
    	System.out.println("DUMMY DATA INSERTION");
        movieRepository.deleteAll();
        List<MovieEntity> movieList = new ArrayList<>();
        movieList.add(new MovieEntity("The Shawshank Redemption"));
        movieList.add(new MovieEntity("The Godfather"));
        movieList.add(new MovieEntity("The Dark Knight"));
        movieList.add(new MovieEntity("12 Angry Men"));
        movieList.add(new MovieEntity("Schindler's List"));
        movieList.add(new MovieEntity("Pulp Fiction"));
        movieList.add(new MovieEntity("Old boy"));
        movieRepository.saveAll(movieList);
    }
    
}
