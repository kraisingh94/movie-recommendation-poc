/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.example.service;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

import org.jboss.logging.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.google.gson.Gson;
import com.infogain.clients.MovieClient;
import com.infogain.clients.RecommendationClient;
import com.infogain.clients.UserClient;
import com.infogain.dto.MovieDTO;
import com.infogain.dto.RecommendationDTO;
import com.infogain.dto.RecommendedMovieDTO;
import com.infogain.dto.UserDTO;

/**
 *
 * @author milandeket
 */
@Service
public class RecommendationClientService {
    
    private static final Logger LOGGER = Logger.getLogger(RecommendationClientService.class.getName());
    
    @Autowired
    RestTemplate restTemplate;
    
    @Autowired
    private UserClient userClient;
    
    @Autowired
    private MovieClient movieClient;
    
    @Autowired
    private RecommendationClient recommendationClient;
    
    public CompletableFuture<UserDTO> getUserDetails(Long userId) {
        CompletableFuture<UserDTO> future = CompletableFuture.supplyAsync(()->{
            ParameterizedTypeReference<UserDTO> ptr =
                            new ParameterizedTypeReference<UserDTO>(){ };
                UserDTO user = userClient.getUserById(userId);
                LOGGER.info("I've found a your guy!");
                return user;
        });
        return future;
    }

    public CompletableFuture<RecommendationDTO> getRecommendationData(Long userId){
        LOGGER.info("Requesting recommendation for user with id: " + userId.toString());
        ParameterizedTypeReference<Collection<RecommendedMovieDTO>> ptrRecommendedMovie =
                        new ParameterizedTypeReference<Collection<RecommendedMovieDTO>>(){ };
        List<MovieDTO> recommendedMovies = 
        		recommendationClient.getRecommendedMovies(userId);
        
        LOGGER.info("Ok, lets recommend you something!");
        RecommendationDTO data = new RecommendationDTO();

        List<Long> ids = recommendedMovies.stream().map(MovieDTO::getMovieId).collect(Collectors.toList());
        CompletableFuture<RecommendationDTO> test = getUserDetails(userId).thenCombine(getMovies(ids), (user, movies)->{
            data.setUser(user);
            movies.stream().forEach((recommendation) -> {
                String name =  recommendation.getName();
                Integer movieId = new Integer(recommendation.getMovieId());
                Integer likes = recommendedMovies.getBody()
                        .stream()
                        .filter(movie-> movie.getId().intValue() == movieId.intValue())
                        .findFirst()
                        .get()
                        .getLikes();
                data.getMovies().add(new MovieDTO(movieId.toString(), name, likes));
            });
            return data;
        });
        return test;
    }
    
    
    private CompletableFuture<Collection<MovieDTO>> getMovies(List<Long> ids){
        LOGGER.info("Looking for movies with ids: " + ids.toString());
        CompletableFuture<Collection<MovieDTO>> future = CompletableFuture.supplyAsync(()->{
            ParameterizedTypeReference<Collection<MovieDTO>> ptrMovie =
                            new ParameterizedTypeReference<Collection<MovieDTO>>(){ };
                     List<MovieDTO> movies = 
                        movieClient.getMoviesById(ids);
                LOGGER.info("I've found some movies!");
                return movies;
        });
        return future;
    };
    
    
}
