package com.infogain.service;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;

import com.infogain.dto.MovieDTO;
import com.infogain.entity.MovieEntity;
import com.infogain.exception.MovieNotFoundException;
import com.infogain.repository.MovieRepository;

public class MovieServiceMockTest {

	@Mock
	private MovieRepository movieRepository;
	
	private MovieDTO dummyMovieDto() {
		MovieDTO movieDTO = new MovieDTO();
		movieDTO.setName("One Man Army");
		return movieDTO;
	}
	
	@Test
	public void testCreateMovie() {
		MovieDTO movieDTO = dummyMovieDto();
		MovieEntity movieEntity = new MovieEntity(movieDTO.getName());
    	movieEntity = movieRepository.saveAndFlush(movieEntity);
    	movieDTO.setMovieId(Mockito.anyLong());
    	//assertEquals(movieDTO.getName(), movieEntity.getName());
	}
	/**
	public void getAllMovies() {
		 return this.movieRepository.findAll()
	                .stream()
	                .map(MovieEntity::toDTO)
	                .collect(Collectors.toList());
	}

	public Collection<MovieDTO> getMoviesById(List<Long> ids) {
		List<MovieDTO> retVal = new ArrayList<>();
        ids.stream()
                .forEach(id -> {
                	Optional<MovieEntity> movieEntityOpt = this.movieRepository.findById(id);
                	if(!movieEntityOpt.isPresent()) {
                		throw new MovieNotFoundException();
                	}
                	MovieDTO dto = new MovieDTO(this.movieRepository.getOne(id.longValue()));
                    retVal.add(dto);
                });
        return retVal;
	}

	public MovieDTO findMovieById(Long movieId) {
		 Optional<MovieEntity> movieEntityOpt = movieRepository.findById(movieId);
	        if(!movieEntityOpt.isPresent()) {
	        	throw new MovieNotFoundException();
	        }
	        return new MovieDTO(movieEntityOpt.get());
	}
	**/
}
